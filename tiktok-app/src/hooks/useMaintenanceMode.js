import { useState, useEffect } from 'react';

// Fonction utilitaire pour gÃ©rer le localStorage
const getMaintenanceStatus = () => {
  try {
    const status = localStorage.getItem('maintenanceMode');
    // Par dÃ©faut, le mode maintenance est DÃ‰SACTIVÃ‰ pour le dÃ©veloppement
    // Changez `false` en `true` pour activer par dÃ©faut en production
    return status === null ? false : status === 'true';
  } catch (error) {
    console.error('Error reading maintenance status from localStorage:', error);
    return false; // Mode dÃ©veloppement - dÃ©sactiver la maintenance par dÃ©faut
  }
};

const setMaintenanceStatus = (isActive) => {
  try {
    localStorage.setItem('maintenanceMode', isActive.toString());
  } catch (error) {
    console.error('Error saving maintenance status to localStorage:', error);
  }
};

const useMaintenanceMode = () => {
  const [isMaintenanceMode, setIsMaintenanceMode] = useState(() => getMaintenanceStatus());

  // Fonction pour activer le mode maintenance
  const enableMaintenance = () => {
    setIsMaintenanceMode(true);
    setMaintenanceStatus(true);
    console.log('ðŸš§ Mode maintenance activÃ©');
  };

  // Fonction pour dÃ©sactiver le mode maintenance
  const disableMaintenance = () => {
    setIsMaintenanceMode(false);
    setMaintenanceStatus(false);
    console.log('âœ… Mode maintenance dÃ©sactivÃ©');
  };

  // Fonction pour basculer le mode maintenance
  const toggleMaintenance = () => {
    const newStatus = !isMaintenanceMode;
    setIsMaintenanceMode(newStatus);
    setMaintenanceStatus(newStatus);
    console.log(`${newStatus ? 'ðŸš§' : 'âœ…'} Mode maintenance ${newStatus ? 'activÃ©' : 'dÃ©sactivÃ©'}`);
  };

  // Ã‰couter les changements du localStorage (pour synchroniser entre les onglets)
  useEffect(() => {
    const handleStorageChange = (e) => {
      if (e.key === 'maintenanceMode') {
        const newStatus = e.newValue === 'true';
        setIsMaintenanceMode(newStatus);
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  // Fonction utilitaire pour rÃ©initialiser complÃ¨tement l'Ã©tat
  const resetMaintenanceMode = () => {
    try {
      localStorage.removeItem('maintenanceMode');
      setIsMaintenanceMode(true); // Retour Ã  l'Ã©tat par dÃ©faut
      console.log('ðŸ”„ Ã‰tat de maintenance rÃ©initialisÃ©');
    } catch (error) {
      console.error('Error resetting maintenance mode:', error);
    }
  };

  // Raccourci clavier global pour les dÃ©veloppeurs (Ctrl+Alt+M)
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.ctrlKey && e.altKey && e.key === 'm') {
        e.preventDefault();
        toggleMaintenance();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isMaintenanceMode]);

  return {
    isMaintenanceMode,
    enableMaintenance,
    disableMaintenance,
    toggleMaintenance,
    resetMaintenanceMode
  };
};

export default useMaintenanceMode; 