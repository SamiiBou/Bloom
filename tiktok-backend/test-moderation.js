// Charger les variables d'environnement
require('dotenv').config();

const contentModerationService = require('./src/services/contentModerationService');
const path = require('path');

async function testModeration() {
  console.log('üß™ Test du service de mod√©ration de contenu');
  console.log('='.repeat(50));
  
  try {
    // Test 1: V√©rifier la configuration
    console.log('\nüìã Configuration actuelle:');
    console.log('- Seuil contenu adulte:', contentModerationService.moderationConfig.adultContentThreshold);
    console.log('- Seuil violence:', contentModerationService.moderationConfig.violentContentThreshold);
    console.log('- Seuil contenu suggestif:', contentModerationService.moderationConfig.racyContentThreshold);
    
    // Test 2: Tester la conversion de likelihood
    console.log('\nüîÑ Test de conversion des niveaux de probabilit√©:');
    const testLikelihoods = ['VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY'];
    testLikelihoods.forEach(likelihood => {
      const score = contentModerationService.convertLikelihoodToScore(likelihood);
      console.log(`- ${likelihood}: ${score}`);
    });
    
    // Test 3: Tester avec un fichier vid√©o (si disponible)
    const testVideoPath = process.argv[2];
    if (testVideoPath) {
      console.log(`\nüé• Test de mod√©ration avec: ${testVideoPath}`);
      
      if (!path.isAbsolute(testVideoPath)) {
        console.log('‚ùå Veuillez fournir un chemin absolu vers le fichier vid√©o');
        return;
      }
      
      try {
        const result = await contentModerationService.moderateVideo(testVideoPath, {
          failSafe: 'allow'
        });
        
        console.log('\nüìä R√©sultats de la mod√©ration:');
        console.log('- Autoris√©:', result.isAllowed ? '‚úÖ OUI' : '‚ùå NON');
        console.log('- Confiance:', (result.confidence * 100).toFixed(1) + '%');
        console.log('- Contenu d√©tect√©:', result.detectedContent.length > 0 ? result.detectedContent.join(', ') : 'Aucun');
        
        if (result.details) {
          console.log('\nüîç D√©tails de l\'analyse:');
          console.log('- Contenu adulte:', (result.details.adultContent * 100).toFixed(1) + '%');
          console.log('- Violence:', (result.details.violentContent * 100).toFixed(1) + '%');
          console.log('- Contenu suggestif:', (result.details.racyContent * 100).toFixed(1) + '%');
          console.log('- Frames analys√©es:', result.details.totalFramesAnalyzed);
        }
        
        if (result.warnings && result.warnings.length > 0) {
          console.log('\n‚ö†Ô∏è Avertissements:');
          result.warnings.forEach(warning => console.log('- ' + warning));
        }
        
        if (result.error) {
          console.log('\n‚ùå Erreur:', result.error);
        }
        
        // Afficher les statistiques format√©es
        const stats = contentModerationService.getModerationStats(result);
        console.log('\nüìà Statistiques:', stats);
        
      } catch (error) {
        console.error('\n‚ùå Erreur lors du test de mod√©ration:', error.message);
        
        if (error.message.includes('ENOENT')) {
          console.log('üí° Le fichier vid√©o n\'existe pas ou n\'est pas accessible');
        } else if (error.message.includes('credentials')) {
          console.log('üí° Probl√®me de credentials Google Cloud - v√©rifiez votre configuration');
        } else if (error.message.includes('project')) {
          console.log('üí° Probl√®me avec l\'ID du projet Google Cloud');
        }
      }
    } else {
      console.log('\nüí° Pour tester avec une vraie vid√©o, utilisez:');
      console.log('node test-moderation.js /chemin/vers/votre/video.mp4');
    }
    
    // Test 4: Tester la mise √† jour de configuration
    console.log('\n‚öôÔ∏è Test de mise √† jour de configuration:');
    const originalConfig = { ...contentModerationService.moderationConfig };
    
    contentModerationService.updateModerationConfig({
      adultContentThreshold: 0.5
    });
    
    console.log('- Nouveau seuil contenu adulte:', contentModerationService.moderationConfig.adultContentThreshold);
    
    // Restaurer la configuration originale
    contentModerationService.updateModerationConfig(originalConfig);
    console.log('- Configuration restaur√©e ‚úÖ');
    
    console.log('\n‚úÖ Tests termin√©s avec succ√®s!');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error);
    
    if (error.code === 'ENOTFOUND') {
      console.log('\nüí° Conseils de d√©pannage:');
      console.log('1. V√©rifiez votre connexion internet');
      console.log('2. V√©rifiez que l\'API Google Cloud Video Intelligence est activ√©e');
      console.log('3. V√©rifiez vos credentials Google Cloud');
    }
  }
}

// Afficher les informations d'aide
console.log('üõ°Ô∏è Test du Service de Mod√©ration de Contenu');
console.log('');
console.log('Usage:');
console.log('  node test-moderation.js                    # Tests de base');
console.log('  node test-moderation.js /path/to/video.mp4 # Test avec vid√©o');
console.log('');
console.log('Variables d\'environnement requises:');
console.log('  GOOGLE_CLOUD_PROJECT_ID                    # ID du projet Google Cloud');
console.log('  GOOGLE_APPLICATION_CREDENTIALS             # Chemin vers le fichier de cl√©s');
console.log('  ou GOOGLE_APPLICATION_CREDENTIALS_JSON     # Credentials JSON direct');
console.log('');

// V√©rifier les variables d'environnement
const requiredEnvVars = ['GOOGLE_CLOUD_PROJECT_ID'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.log('‚ùå Variables d\'environnement manquantes:');
  missingVars.forEach(varName => console.log(`  - ${varName}`));
  console.log('');
  console.log('üí° Ajoutez ces variables √† votre fichier .env');
  process.exit(1);
}

if (!process.env.GOOGLE_APPLICATION_CREDENTIALS && !process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON) {
  console.log('‚ùå Credentials Google Cloud manquants:');
  console.log('  D√©finissez GOOGLE_APPLICATION_CREDENTIALS ou GOOGLE_APPLICATION_CREDENTIALS_JSON');
  console.log('');
  process.exit(1);
}

// Lancer les tests
testModeration().catch(console.error); 